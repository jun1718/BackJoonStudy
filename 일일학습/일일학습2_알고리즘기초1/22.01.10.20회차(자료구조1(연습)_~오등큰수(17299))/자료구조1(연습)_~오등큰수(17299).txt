21.01.10.20회차
===============================================================================
*알고리즘 기초 1 / 2
===============================================================================


################################################################################################################
예제11)알고리즘 기초 1 / 자료구조 1 (연습) / 오큰수

반례 : 인덱스 전에 것으로 순차적으로 스택의 값의 인덱스가 맞아떨어질거라 생각하면 아래 반례가 나옴
	-그렇기때문에 각 스택의 값에 대한 인덱스를 따로 기록해야함 이걸 클래스를 만들어서(새로운 자료구조) 한다.
6
41 3 2 1 5 4 45

https://www.acmicpc.net/problem/17298
################################################################################################################


답:


package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	public static void main(String[] args) throws IOException {
		Solve solve = new Solve();
		solve.run();
	}
}//class

class Solve {
	private class Node {
		int index = 0;
		int num = 0;
		
		Node(int index, int num) {
			this.index = index;
			this.num = num;
		}
	}
	
	private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private int N;
	private int[] answer;
	private Stack<Node> stack = new Stack<>();
	private StringBuilder sb = new StringBuilder();
	
	public void run() throws IOException {
		input();
		for (int i = 0; i < N; i++) {
			sb.append(answer[i] + " ");
		}
		
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
	
	private void input() throws IOException {
		this.N = Integer.parseInt(br.readLine());
		String[] read = br.readLine().split(" ");
		
		answer = new int[N];
		Arrays.fill(answer, -1);
		
		for (int i = 0; i < N; i++) {
			operateStack(new Node(i, Integer.parseInt(read[i])));
		}
	}
	
	private void operateStack(Node node) {
		while (!stack.isEmpty() && stack.peek().num < node.num) {
			answer[stack.pop().index] = node.num;
		}
		stack.add(node);
	}
}






















################################################################################################################
예제12)알고리즘 기초 1 / 자료구조 1 (연습) / 오등큰수

-3가지 방식이 있는데 가장 빠른 방식으로하라
-아래 답중 가장 아래방식이며 교훈을 읽어라

https://www.acmicpc.net/problem/17299
################################################################################################################



답(다른사람의 빠른 답 참고/입력된 수의 갯수, 입력된 수를 각각의 배열에 넣고 stack에는 
			입력된 값이 들어가는 것이 아니라 인덱스값이 들어감):
	-1128ms

package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static int[] origin;
	private static int[] count = new int[1000001];
	private static int[] answer;
	private static int N;
	private static Stack<Integer> stack = new Stack<>();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {
		run();
	}
	
	public static void run() throws IOException {
		input();
		compare();
		writeData();
	}
	
	private static void input() throws IOException {
		N = Integer.parseInt(br.readLine());
		origin = new int[N];
		answer = new int[N];
		Arrays.fill(answer, -1);		
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		for (int i = 0; i < N; i++) {
			origin[i] = Integer.parseInt(st.nextToken());
		}
		
		for (int i = 0; i < N; i++) {
			count[origin[i]]++;
		}
	}
	
	private static void compare() {
		stack.push(0);
		
		for (int i = 1; i < N; i++) {
			while (!stack.isEmpty() && count[origin[stack.peek()]] < count[origin[i]]) {
				answer[stack.pop()] = origin[i];
			}
			stack.push(i);
		}
	}
	
	private static void writeData() throws IOException {
		for (int i = 0; i < N; i++) {
			sb.append(answer[i] + " ");
		}
		
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
}







답(내가푼 답, 이전 문제에서 응용하여 hash로 값을 찾아냄, stack에 객체를(index, 값, f값 가진 객체) 넣음):
	-1528ms

package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	public static void main(String[] args) throws IOException {
		Solve solve = new Solve();
		solve.run();
	}
}//class

class Solve {
	private class Node {
		int index = 0;
		int num = 0;
		int f = 0;
		
		Node(int index, int num, int f) {
			this.index = index;
			this.num = num;
			this.f = f;
		}
	}
	
	private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private int N;
	private int[] answer;
	private Stack<Node> stack = new Stack<>();
	private StringBuilder sb = new StringBuilder();
	private HashMap<Integer, Integer> hm = new HashMap<>();
	private int[] origin;
	
	public void run() throws IOException {
		input();
		for (int i = 0; i < N; i++) {
			sb.append(answer[i] + " ");
		}
		
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
	
	private void input() throws IOException {
		this.N = Integer.parseInt(br.readLine());
		String[] read = br.readLine().split(" ");
		
		answer = new int[N];
		Arrays.fill(answer, -1);
		
		origin = new int[N];
		for (int i = 0; i < N; i++) {
			origin[i] = Integer.parseInt(read[i]);
		}
		
		for (int i = 0; i < N; i++) {			
			f(i);
		}
		
		for (int i = 0; i < N; i++) {
			operateStack(new Node(i, origin[i], hm.get(origin[i])));
		}
	}
	
	private void f(int i) {
		hm.put(origin[i], hm.getOrDefault(origin[i], 0) + 1);
	}
	
	private void operateStack(Node node) {
		while (!stack.isEmpty() && stack.peek().f < node.f) {
			answer[stack.pop().index] = node.num;
		}
		stack.add(node);
	}
}



답(내가푼 답과 다른이의 답을 합침, 갯수를 배열을 이용하여 값 찾아냄, stack에 객체를(index, 값, f값 가진 객체) 넣음):
	-1092ms
		=> 교훈 : 값들을 각각 배열에 받아서 배열을 응용하는것보다 연결되는 값들은
			클래스로 모아 만든 객체를 이용해서 관리하는 것이 더 빠르다.
package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	public static void main(String[] args) throws IOException {
		Solve solve = new Solve();
		solve.run();
	}
}//class

class Solve {
	private class Node {
		int index = 0;
		int num = 0;
		int f = 0;
		
		Node(int index, int num, int f) {
			this.index = index;
			this.num = num;
			this.f = f;
		}
	}
	
	private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private int N;
	private int[] origin;
	private int[] count = new int[1000001];
	private int[] answer;
	private Stack<Node> stack = new Stack<>();
	private StringBuilder sb = new StringBuilder();

	public void run() throws IOException {
		input();
		for (int i = 0; i < N; i++) {
			sb.append(answer[i] + " ");
		}
		
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
	
	private void input() throws IOException {
		this.N = Integer.parseInt(br.readLine());
		String[] read = br.readLine().split(" ");
		
		answer = new int[N];
		Arrays.fill(answer, -1);
		
		origin = new int[N];
		for (int i = 0; i < N; i++) {
			origin[i] = Integer.parseInt(read[i]);
		}
		
		for (int i = 0; i < N; i++) {			
			count[origin[i]]++;
		}
		
		for (int i = 0; i < N; i++) {
			operateStack(new Node(i, origin[i], count[origin[i]]));
		}
	}
	
	private void operateStack(Node node) {
		while (!stack.isEmpty() && stack.peek().f < node.f) {
			answer[stack.pop().index] = node.num;
		}
		stack.add(node);
	}
}

















