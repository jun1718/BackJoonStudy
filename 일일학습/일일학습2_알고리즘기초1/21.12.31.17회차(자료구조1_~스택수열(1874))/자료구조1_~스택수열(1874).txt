21.12.31.17회차
===============================================================================
*알고리즘 기초 1 / 2
===============================================================================





################################################################################################################
예제1)알고리즘 기초 1 / 자료구조1 / 스택

https://www.acmicpc.net/problem/10828
################################################################################################################


답 : 




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());
		Stack stack = new Stack();
		
		
		inputData(stack, N);
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void inputData(Stack stack, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			String[] str = br.readLine().split(" ");
			if (str.length == 2) {
				stack.push(Integer.parseInt(str[1]));
			} else {
				String tmp = str[0];
				if (tmp.equals("pop")) {
					if (stack.empty()) {
						bw.write("" + (-1));
						bw.newLine();
						continue;
					}
					bw.write("" + stack.pop());
					bw.newLine();
					continue;
				}
				if (tmp.equals("size")) {
					bw.write("" + stack.size());
					bw.newLine();
					continue;
				}
				if (tmp.equals("empty")) {
					if (stack.empty()) {
						bw.write("1");
						bw.newLine();
						continue;
					} 
					bw.write("0");
					bw.newLine();
					continue;
				}
				if (tmp.equals("top")) {
					if (stack.empty()) {
						bw.write("" + (-1));
						bw.newLine();
						continue;
					}				
					bw.write("" + stack.peek());
					bw.newLine();
				}
			}
		}
	}

}//class








################################################################################################################
예제2)알고리즘 기초 1 / 자료구조1 / 단어 뒤집기

https://www.acmicpc.net/problem/9093
################################################################################################################


답 : 




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());
		Stack stack = new Stack();
		
		inputData(stack, N);
		
		bw.close();
		br.close();
	}
	
	public static void inputData(Stack stack, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			String[] str = br.readLine().split(" ");
			inputData(stack, str, str.length);
		}
	}
	
	private static void inputData(Stack stack, String[] str, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			reverseThroughStack(stack, str[i], str[i].length());
		}
		
		bw.newLine();
		bw.flush();
	}
	
	private static void reverseThroughStack(Stack stack, String str, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			stack.push(str.charAt(i));
		}
		
		writeData(stack, N);
	}
	
	private static void writeData(Stack stack, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			bw.write(String.valueOf(stack.pop()));			
		}
		
		bw.write(" ");
	}

}//class








################################################################################################################
예제3)알고리즘 기초 1 / 자료구조1 / 괄호

https://www.acmicpc.net/problem/9012
################################################################################################################


답 : 



package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());

		String[] arr = new String[N];
		
		inputData(arr, N);
		checkVPS(arr, N);
		
		bw.close();
		br.close();
	}
	
	public static void inputData(String[] arr, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			arr[i] = br.readLine();
		}
	}
	
	public static void checkVPS(String[] arr, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			Stack stack = new Stack();
			pushStack(arr[i], arr[i].length(), stack);
			boolean flag = isVPS(stack);
			writeData(flag);
		}
	}
	
	private static void pushStack(String str, int N, Stack stack) {
		for (int i = 0; i < N; i++) {
			stack.push(str.charAt(i));
		}
	}
	
	private static boolean isVPS(Stack stack) {
		if ((char) stack.peek() == '(' || stack.size() % 2 != 0) {
			return false;
		}
		
		int count = 0;
		while (!stack.empty()) {	
			while (!stack.empty() && (char) stack.peek() == ')') {
				stack.pop();
				count++;
			}
			
			while (!stack.empty() && (char) stack.peek() == '(') {
				stack.pop();
				count--;
				
				if (count == -1) {
					return false;
				}
			}
		}
		
		if (count != 0) {
			return false;
		}
		
		return true;
	}
	
	private static void writeData(boolean flag) throws IOException {
		if (flag) {
			bw.write("YES\n");
			return;
		}
		
		if (!flag) {
			bw.write("NO\n");
		}
	}
}//class





다른사람답(while안쓰고 for문사용, 새로운 char배열만들어서 앞에서부터 확인하여 빼가는데 count가 -1인경우는
	stac.isEmpty()를 활용해서 확인하고 삭제하는 방식. stack에 값이 다들어가지 않아도 된다는 면에서는
	효율적이지만 내 방식은 char배열을 안만든다는 점에서 메모리소비를 막을수 있음)




import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class Main {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int T = Integer.parseInt(br.readLine());
		for(int tc=1;tc<=T;tc++) {
			String str = br.readLine();
			char[] arr =str.toCharArray();
			
			Stack<Character> stack = new Stack<>();
			boolean flag = true;
			for(char c:arr) {
				if(c=='(') {
					stack.push(c);
				}else {
					if(stack.isEmpty()) {
						flag=false;
						break;
					}
					stack.pop();						
				}
			}
			
			if(!stack.isEmpty()) {
				flag=false;
			}
			if(!flag) {
				System.out.println("NO");
			}else {
				System.out.println("YES");
			}
		}
		
	}

}










################################################################################################################
예제4)알고리즘 기초 1 / 자료구조1 / 스택 수열

https://www.acmicpc.net/problem/1874
################################################################################################################



인터넷에 더 간결하고 직관적인 코드:
package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static Stack stack = new Stack();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());
		int[] arr = new int[N];
				
		inputData(arr, N);
		makeBunch(arr, N);
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void inputData(int[] arr, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
	}
	
	public static void makeBunch(int[] arr, int N) throws IOException {
		int j = 1;
		for (int i = 0; i < N; i++) {
			// j > arr[i] 라면 절대 stack이 비어 있을 수 없다.
				// 현재 j 전까지는 모두 스택에 push되었기 때문
			if (stack.empty() || (int) stack.peek() < arr[i]) {
				while (j <= arr[i]) {
					stack.push(j);
					sb.append("+\n");
					j++;
				}
				
				stack.pop();
				sb.append("-\n");
			} else if ((int) stack.peek() == arr[i]) {
				stack.pop();
				sb.append("-\n");
			} else if ((int) stack.peek() > arr[i]) {
				bw.write("NO");
				return;
			}
		}
		
		bw.write(sb.toString());
	}
}//class






처음 내가 낸 답 : 


package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static Stack stack = new Stack();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());
		int[] arr = new int[N];
		
	
		
		inputData(arr, N);
		makeBunch(arr, N);
		
		br.close();
	}
	
	public static void inputData(int[] arr, int N) throws IOException {
		for (int i = 0; i < N; i++) {
			arr[i] = Integer.parseInt(br.readLine());
		}
	}
	
	public static void makeBunch(int[] arr, int N) throws IOException {
		int j = 1;
		for (int i = 0; i < N; i++) {
			while (true) {
				if (arr[i] > j) {
					stack.push(j);
					sb.append("+\n");
					j++;		
					continue;
				}
				
				if (arr[i] == j) {
					stack.push(j);
					sb.append("+\n");
					stack.pop();
					sb.append("-\n");
					j++;
				
					while (!stack.empty() && i + 1 < N && arr[i + 1] == (int) stack.peek()) {
						stack.pop();
						sb.append("-\n");
						i++;
					}
							
					break;
				}

				if (!stack.empty() && arr[i] < (int) stack.peek()) {
					System.out.println("NO");
					return;
				}
			}
		}
		
//		if (!stack.empty()) {
//			System.out.println("NO");
//			return;
//		}
		
		System.out.println(sb.toString());
	}
}//class


