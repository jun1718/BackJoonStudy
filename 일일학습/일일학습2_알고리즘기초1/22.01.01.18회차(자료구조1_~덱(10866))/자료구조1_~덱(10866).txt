21.1.1.18회차
===============================================================================
*알고리즘 기초 1 / 2
===============================================================================






################################################################################################################
예제5)알고리즘 기초 1 / 자료구조1 / 에디터

https://www.acmicpc.net/problem/1406
################################################################################################################




답(else가 없게 가시적으로 편하게 정리한 코드):

package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static Stack stack1 = new Stack();
	private static Stack stack2 = new Stack();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {			
		int N = 0;
		String str = "";
		N = inputData(str);
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static int inputData(String str) throws IOException {
		str = br.readLine();
		int N = Integer.parseInt(br.readLine());
		inputStack(str);
		
		for (int i = 0; i < N; i++) {
			action(str);
		}
		
		workFinish(str);
		
		return N;
	}
	
	private static void inputStack(String str) {
		for (int i = 0; i < str.length(); i++) {
			stack1.push(str.charAt(i));
		}	
	}
	
	private static void action(String str) throws IOException {
		String[] order = br.readLine().split(" ");

		if (order.length == 1) {
			if (order[0].charAt(0) == 'L') {
				if (stack1.empty()) {
					return;
				}
				
				stack2.push(stack1.pop());
				return;
			}
		
			if (order[0].charAt(0) == 'D') {
				if (stack2.empty()) {
					return;
				}
				
				stack1.push(stack2.pop());
				return;
			} 
			
			
			{ // order[0].charAt(0) == 'B'인 경우
				if (stack1.empty()) {
					return;
				}
				
				stack1.pop();
				return;
			}
		} 
		
		// order.length == 2인 경우
		stack1.push(order[1].charAt(0));
	}
	
	
	private static void workFinish(String str) throws IOException {
		if (!stack2.empty()) {
			finishStack1();
		}

		finishStringBuilder();
	}
	
	private static void finishStack1() {
		int len = stack2.size();
		for (int i = 0; i < len; i++) {
			stack1.push(stack2.pop());
		}
	}
	
	private static void finishStringBuilder() throws IOException {
		for (int i = 0; i < stack1.size(); i++) {
			sb.append(stack1.get(i));
		}
		
		bw.write(sb.toString());
	}
	

}//class



답(else가 있지만 속도는 쬐끔 더 빠른 코드):



import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static Stack stack1 = new Stack();
	private static Stack stack2 = new Stack();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {			
		int N = 0;
		String str = "";
		N = inputData(str);
		
		br.close();
	}
	
	public static int inputData(String str) throws IOException {
		str = br.readLine();
		int N = Integer.parseInt(br.readLine());
		inputStack(str);
		
		for (int i = 0; i < N; i++) {
			action(str);
		}
		
		workFinish(str);
		
		return N;
	}
	
	private static void inputStack(String str) {
		for (int i = 0; i < str.length(); i++) {
			stack1.push(str.charAt(i));
		}	
	}
	
	private static void action(String str) throws IOException {
		String[] order = br.readLine().split(" ");

		if (order.length == 1) {
			
			
			if (order[0].charAt(0) == 'L') {
				if (stack1.empty()) {
					return;
				}
				stack2.push(stack1.pop());
			} else if (order[0].charAt(0) == 'D') {
				if (stack2.empty()) {
					return;
				}
				stack1.push(stack2.pop());
			} else if (order[0].charAt(0) == 'B') {
				if (stack1.empty()) {
					return;
				}
				stack1.pop();
			}
		} else if (order.length == 2) {
			stack1.push(order[1].charAt(0));
		}
	}
	
	
	private static void workFinish(String str) {
		if (!stack2.empty()) {
			finishStack1();
		}

		finishStringBuilder();
	}
	
	private static void finishStack1() {
		int len = stack2.size();
		for (int i = 0; i < len; i++) {
			stack1.push(stack2.pop());
		}
	}
	
	private static void finishStringBuilder() {
		for (int i = 0; i < stack1.size(); i++) {
			sb.append(stack1.get(i));
		}
		
		System.out.println(sb.toString());
	}
	

}//class


















################################################################################################################
예제6)알고리즘 기초 1 / 자료구조1 / 큐

*dequeue(덱) 문제가 아니다. queue로만 해겶해라. back을 효율적으로 항상 back할때마다
	조건연산 확인하는것이아니라 특정 값이 바뀌는 곳에서만 연산하도록 헤아려라

https://www.acmicpc.net/problem/10845
################################################################################################################


답:




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	private static Queue<Integer> que = new LinkedList<>();
	private static int back = -1;
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {			
		int N = Integer.parseInt(br.readLine());
		getData(N);
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	private static void getData(int N) throws IOException {
		for (int i = 0; i < N; i++) {
			int result = receiveOrder();
			if (result != -2) { // push를 상징하는 수가 반환된 경우 출력하지 말라는 의미
				sb.append(result).append("\n");				
			}
		}
		
		bw.write(sb.toString());
	}

	private static int receiveOrder() throws IOException {
		String[] str = br.readLine().split(" ");

		
		if (str.length == 2) {
			back = Integer.parseInt(str[1]);
			que.offer(back);
			return -2; // push인 경우 출력하지 말라는 의미의 수 반환
		}
		
		{ // str.length == 1 인 경우
			if (str[0].equals("front")) {
				if (que.isEmpty()) {
					return -1;
				}
				
				return que.peek();			
			}

			if (str[0].equals("back")) {
				return back;
			}
			
			if (str[0].equals("pop")) {
				if (que.isEmpty()) {
					return -1;
				}
				
				int tmp = que.poll();
				
				if (que.isEmpty()) {
					back = -1;
				}
				
				return tmp;
			}
			
			if (str[0].equals("size")) {
				return que.size();
			}
			
			if (str[0].equals("empty")) {
				if (que.isEmpty()) {
					return 1;
				}
				
				return 0;
			}
			
		}
		
		return Integer.MAX_VALUE; // 해당 수가 출력될 일은 없음
	}
}//class















################################################################################################################
예제7)알고리즘 기초 1 / 자료구조1 / 조세퍼스 문제

*최대한 효율적이게 해라. 아래 답은 여러가지 방법을 제시한다.
*큐로 풀어라 디큐(덱)금지

https://www.acmicpc.net/problem/1158
################################################################################################################



답:



package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	private static Queue<Integer> que = new LinkedList<>();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {
		StringTokenizer st = new StringTokenizer(br.readLine());
		int[] N = new int[2];
		N[0] = Integer.parseInt(st.nextToken());
		N[1] = Integer.parseInt(st.nextToken());
				
		inputQueue(N[0]);
		
		sb.append("<");
		makeJosephus(N);
		sb.append(">");
		
		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void inputQueue(int N) {
		for (int i = 1; i <= N; i++) {
			que.offer(i);
		}
	}
	
	public static void makeJosephus(int[] N) {
		while (!que.isEmpty()) { // 실험결과 지금처럼보다는 테두리를 아래 for로 하고 내부 내용물을 넣었을때가 더 빠르네 
			for (int j = 1; j < N[1]; j++) {
				que.offer(que.poll());
			}
			
			sb.append(que.poll()).append(", ");			
		}
//		for (int i = 0; i < N[0]; i++) {
//			for (int j = 0; j < N[1]; j++) {
//				if (j == N[1] - 1) {
//					if (i == N[0] - 1) {
//						sb.append(que.poll());
//						break;
//					}
//					sb.append(que.poll()).append(", ");
//					break;
//				}
//				
//				que.offer(que.poll());
//			}
			
//			int count = 0;
//			while (true) {
//				count++;
//				if (count % N[1] == 0) {
//					if (i == N[0] - 1) {
//						sb.append(que.poll());
//						break;
//					}
//					sb.append(que.poll()).append(", ");
//					break;
//				}
//				que.offer(que.poll());				
//			}
//		}
		
		sb.setLength(sb.length() - 2);
	}
}//class


















################################################################################################################
예제8)알고리즘 기초 1 / 자료구조1 / 덱

https://www.acmicpc.net/problem/10866
################################################################################################################

답:


package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;

public class Main {	
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	private static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

	private static Deque<Integer> deque = new ArrayDeque<>();
	private static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {
		int N = Integer.parseInt(br.readLine());
		
		getOrder(N);
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void getOrder(int N) throws IOException {
		for (int i = 0; i < N; i++) {
			int result = runOrder();
			
			if (result != -2) {
				bw.write(String.valueOf(result));
				bw.newLine();
			}
		}
	}
	
	private static int runOrder() throws IOException {
		String[] str = br.readLine().split(" ");
		
		if (str.length == 2) { // que에 입력하는 명령
			if (str[0].equals("push_front")) {
				deque.offerFirst(Integer.parseInt(str[1]));
				return -2;
			}
			if (str[0].equals("push_back")) {
				deque.offerLast(Integer.parseInt(str[1]));
				return -2;
			}
		}
		
		{ // str.length == 1 인 경우
			{ // 삭제 및 출력하는 명령
				if (str[0].equals("pop_front")) {
					if (deque.isEmpty()) {
						return -1;
					}
					return deque.pollFirst();
				}
				if (str[0].equals("pop_back")) {
					if (deque.isEmpty()) {
						return -1;
					}
					return deque.pollLast();
				}				
			}
			{ // 출력민하는 명령
				if (str[0].equals("front")) {
					if (deque.isEmpty()) {
						return -1;
					}
					return deque.peekFirst();
				}
				if (str[0].equals("back")) {
					if (deque.isEmpty()) {
						return -1;
					}
					return deque.peekLast();
				}
			}
			{ // 그밖의 기타 명령
				if (str[0].equals("size")) {
					return deque.size();
				}
				if (str[0].equals("empty")) {
					if (deque.isEmpty()) {
						return 1;
					}
					return 0;
				}
			}
		}
		
		return Integer.MAX_VALUE;
	}
}//class




