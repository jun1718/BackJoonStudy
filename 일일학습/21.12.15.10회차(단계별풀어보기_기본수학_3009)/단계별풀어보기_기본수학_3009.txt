21.12.15.10회차
===============================================================================
*단계별로 풀어보기 
===============================================================================





################################################################################################################
예제32)단계별로 풀어보기 / 기본수학2 / 소수구하기

*에라토스테네스의 체

https://www.acmicpc.net/problem/1929
################################################################################################################


답 : 



package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	public static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());		
		
		int start = Integer.parseInt(st.nextToken());
		int end = Integer.parseInt(st.nextToken());
		
		int[] sieve = new int[end + 1];
		sieve[0] = 1;
		sieve[1] = 1;  // 이거 안하면 1도 소수로 출력한다.
		
		usePrimeNumberSieve(sieve, end);
		findPrimeNumber(sieve, start, end);
		
		bw.flush();
		bw.close();
		
		br.close();
	}
	
	public static void usePrimeNumberSieve(int[] sieve, int end) {
		for (int i = 2; i <= end; i++) {
			if (sieve[i] == 0 && (long) i * i <= end) {
				usePrimeNumberSieve(sieve, end, i);				
			}
		}		
	}
	
	private static void usePrimeNumberSieve(int[] sieve, int end, int i) {
		for (int j = i * i; j <= end; j += i) {
			sieve[j] = 1;
		}
	}

	public static void findPrimeNumber(int[] sieve, int start, int end) throws IOException {
		for (int i = start; i <= end; i++) {
			if (sieve[i] == 0) {
				bw.write(String.valueOf(i));
				bw.newLine();
			}
		}
	}
}//class






















################################################################################################################
예제33)단계별로 풀어보기 / 기본수학2 / 베르트랑 공준

*에라토스테네스의 체는 위에서 사용했으니 일반 방식으로 다시 풀어봐라
	-제곱근을 이용한 소수찾기

https://www.acmicpc.net/problem/4948
################################################################################################################


답 : 

package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	public static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		getPrimeNumberCount(br);
		
		bw.flush();
		bw.close();
		br.close();
	}
	
	public static void getPrimeNumberCount(BufferedReader br) throws IOException {
		while (true) {
			int n = Integer.parseInt(br.readLine());
			if (n == 0) break;
			
			int count = getPrimeNumberCount(n);
			bw.write(String.valueOf(count));
			bw.newLine();
		}	
	}
	
	private static int getPrimeNumberCount(int n) {
		int count = 0;
		
		for (int i = n + 1; i <= n * 2; i++) {
			if (isPrimeNumber(i)) {
				count++;
			}
		}
		
		return count;
	}
	
	private static boolean isPrimeNumber(int i) {
		for (int j = 2; j <= Math.sqrt(i); j++) {
			if (i % j == 0) {
				return false;
			}
		}
		
		return true;
	}
}//class











################################################################################################################
예제34)단계별로 풀어보기 / 기본수학2 / 골드바흐의 추측

*에라토스테네스의 체를 이용하여 풀어라
	-앞문제에서는 int[]를 이용하여 풀었지만 이번문제에서는 boolean으로 true일경우
		소수, false일경우 소수가 아닌수로 하여라
		-처음 boolean 배열 만들면 모두 false인데 모두 true로 만드는 api를 이용하라
	-에라토네스의 체 범위만들때 하드코딩하지 말것
	-에라토네스의 체 범위안의 수들을 하나하나 대입해서 배수의 값을 변경해왔다면 이번에는
		for문이 끝나는 제한을 다르게 넣어라(훨씬 빠르다)
		-생각잘하면 i <= MAX_PRIME_NUMBER로 안해도된다.
		-범위가 2~20이고 i가 5일때 5 * 5 는 25인데 범위를 넘어간다.
			6 ~ 20 사이의 소수의 배수값에(소수가 아니라면 이미 값은 변경돼있다) 해당하는 인덱스들의 값을 바꿔줄 필요가 없다.

https://www.acmicpc.net/problem/9020
################################################################################################################


답 : 




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

//	20 24 28
//2 3 5 7 11 13 17 19

public class Main {	
	public static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
	public static final int MAX_PRIME_NUMBER = 9999;
	public static boolean[] check = new boolean[MAX_PRIME_NUMBER + 1];
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		Arrays.fill(check, true);
		check[0] = false;
		check[1] = false;
		
		startSieveOfEratos();
		
		int count = Integer.parseInt(br.readLine());
		for (int i = 0; i < count; i++) {
			getPartition(Integer.parseInt(br.readLine()));
		}
		
		bw.flush();
		bw.close();
		br.close();
	}

	public static void startSieveOfEratos() {
		for (int i = 2; i * i <= MAX_PRIME_NUMBER; i++) { // 소수의 범위는 2~ 9999사이
			if (check[i]) {
				changeArray(i);
			}
		}
	}
	
	private static void changeArray(int i) {
		for (int j = i * i; j <= MAX_PRIME_NUMBER; j += i) {
			check[j] = false;
		}
	}

	public static void getPartition(int n) throws IOException {
		for (int i = n / 2; i >= 2; i--) {
			if (check[i] && check[n - i]) {
				bw.write("" + i + " " + (n - i));
				bw.newLine();				
				return;
			}
		}
	}
	
}//class















################################################################################################################
예제35)단계별로 풀어보기 / 기본수학2 / 직사각형에서 탈출

https://www.acmicpc.net/problem/1085
################################################################################################################


답 : 




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int x = Integer.parseInt(st.nextToken());
		int y = Integer.parseInt(st.nextToken());
		int w = Integer.parseInt(st.nextToken());
		int h = Integer.parseInt(st.nextToken());
		
//		int heightH = h - y;
//		int heightZero = y; // y - 0
//		int heightMin = Math.min(heightH, heightZero);
		
//		int wideW = w - x;
//		int wideZero = x; // x - 0
//		int wideMin = Math.min(wideW, wideZero);

		int height = Math.min(h - y, y);
		int wide = Math.min(w - x, x);
		int result = Math.min(height, wide);
		
		bw.write(String.valueOf(result));
		bw.newLine();
		
		bw.flush();
		bw.close();
		
		br.close();
	}
	
}//class

















################################################################################################################
예제36)단계별로 풀어보기 / 기본수학2 / 네번째 점


https://www.acmicpc.net/problem/3009
################################################################################################################


답 : 



package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int[][] locations = new int[3][2];
		
		for (int i = 0; i < 3; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			locations[i][0] = Integer.parseInt(st.nextToken());				
			locations[i][1] = Integer.parseInt(st.nextToken());				
		}
			
		int x = 0;
		int y = 0;
	
		if (locations[0][0] == locations[1][0]) {
			x = locations[2][0];
		} else if (locations[0][0] == locations[2][0]) {
			x = locations[1][0];
		} else if (locations[1][0] == locations[2][0]) {
			x = locations[0][0];
		}
		
		if (locations[0][1] == locations[1][1]) {
			y = locations[2][1];
		} else if (locations[0][1] == locations[2][1]) {
			y = locations[1][1];
		} else if (locations[1][1] == locations[2][1]) {
			y = locations[0][1];
		}
		
		bw.write("" + x + " " + y);
		bw.flush();
		bw.close();
		
		br.close();
	}
	
}//class



