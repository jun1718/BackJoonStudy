21.12.14.9회차
===============================================================================
*단계별로 풀어보기 
===============================================================================









################################################################################################################
예제28)단계별로 풀어보기 / 기본수학 / Fly me to the Alpha Centauri

*출력은 단 한번만 사용하라.
*빠른 입출력을 사용하라.

https://www.acmicpc.net/problem/1011
	-참)https://st-lab.tistory.com/79
################################################################################################################


답 : 


count	distance	move			max
1	1		1			1
2	2		1 1			1
3	4		1 2 1			2
4	6		1 2 2 1			2
5	9		1 2 3 2 1		3
6	12		1 2 3 3 2 1		3
7	16		1 2 3 4 3 2 1		4
8	20		1 2 3 4 4 3 2 1		4
9	25		1 2 3 4 5 		5
			4 3 2 1
10	30		1 2 3 4 5		5
			5 4 3 2 1


		o			o					o							o
distance	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16
count		1	2	3	3	4	4	5	5	5	6	6	6	7	7	7	7
max		1	1	1	2	2	2	2	2	3	3	3	3	3	3	3	4
		

										o					
distance	17	18	19	20	21	22	23	24	25	26	27	28	29	30	
count		8	8	8	8	9	9	9	9	9
max		4	4	4	4	4	4	4	4	5


1) max는 distance의 루트값에서 소수점을 땐 값 
int max = (int) Math.sqrt(distance);
 

2) max와 distance의 루트값에서 소수점을 때지않은 값이 같으면 max가 변하는 구간이고 맥스가 변하는 구간은 max * 2 + 1을 하면 count값이 나옴
if (max == Math.sqrt(distance)) {
	print(max * 2 - 1);
	return;
}

3)max * max < distance <= (max * max) + max

if (distance <= (max * max) + max) {
	print(max * 2);
	return;
}


4)(max * max) + max < distance < (max * max) + 2max

if (distance < (max * max) + 2max) { //else 해도 됨 ===================================> 이렇게하니깐 안됐음. else를 해야만 함.. 
	print(max * 2 + 1);	
}





package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
//	private static final Scanner scan = new Scanner(System.in);	
	public static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int T = Integer.parseInt(br.readLine());
		
		for (int i = 0; i < T; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int x =  Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int distance = y - x;
			
			calcCount(distance);
		}
		
		
		bw.write(sb.toString());
		bw.newLine();
		bw.flush();
		bw.close();
		
		br.close();
	}
	
	public static void calcCount(int distance) {
		int max = (int) Math.sqrt(distance);
		
		if (max == Math.sqrt(distance)) {
			sb.append(max * 2 - 1).append("\n");
			return;
		}
		
		if (distance <= (max * max) + max) {
			sb.append(max * 2).append("\n");
			return;
		}
		
		else {
			sb.append(max * 2 + 1).append("\n");
			return;
		}
		
	}
}//class






















################################################################################################################
예제29)단계별로 풀어보기 / 기본수학2 / 소수 찾기

https://www.acmicpc.net/problem/1978
################################################################################################################


답 : 




package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
//	private static final Scanner scan = new Scanner(System.in);	
	public static StringBuilder sb = new StringBuilder();
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int T = Integer.parseInt(br.readLine());
		int count = 0;
		
		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 0; i < T; i++) {
			int num = Integer.parseInt(st.nextToken());
			if (calc(num)) {
				count++;
			}
		}
		
		
		bw.write(String.valueOf(count));
		bw.newLine();
		bw.flush();
		bw.close();
		
		br.close();
	}
	
	
	public static boolean calc(int num) {
		boolean flag = true;
		
		if (num == 1) {
			return false;
		}
		
		for (int i = 2; i <= (int) Math.sqrt(num); i++) { // int 캐스팅연산안해도 됨
			if (num % i == 0) {
				flag = false;
				break;
			}
		}
		
		return flag;
	}
	
}//class




















################################################################################################################
예제30)단계별로 풀어보기 / 기본수학2 / 소수

https://www.acmicpc.net/problem/2581
################################################################################################################


답 : 



package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	public static List<Integer> list = new ArrayList<>();
	public static int sum = 0;
	
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int start = Integer.parseInt(br.readLine());
		int end = Integer.parseInt(br.readLine());
		
		gather(start, end);
		
		if (list.isEmpty()) {
			bw.write(String.valueOf(-1));
			bw.flush();
			bw.close();
			br.close();
			return;
		}
		
		Collections.sort(list);
		int min = list.get(0);
		
		bw.write(String.valueOf(sum));
		bw.newLine();
		bw.write(String.valueOf(min));
		bw.flush();
		bw.close();
		
		br.close();
	}
	
	public static int gather(int start, int end) {
		
		for (int i = start; i <= end; i++) {
			if (calc(i)) {
				list.add(i);
				sum += i;
			}
		}
		
		return 0;
	}
	
	private static boolean calc(int num) {
		boolean flag = true;
		
		if (num == 1) {
			return false;
		}
		
		for (int i = 2; i <= (int) Math.sqrt(num); i++) {
			if (num % i == 0) {
				flag = false;
				break;
			}
		}
		
		return flag;
	}
	
}//class















################################################################################################################
예제31)단계별로 풀어보기 / 기본수학2 / 소인수분해


https://www.acmicpc.net/problem/11653
################################################################################################################


답 : 

package backjun;

import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {	
	public static List<Integer> list = new ArrayList<>();
	public static void main(String[] args) throws IOException {	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int num = Integer.parseInt(br.readLine());
		if (num == 1) {
			return;
		}
		
		calc(num);
		for (int i = 0; i < list.size(); i++) {
			bw.write(String.valueOf(list.get(i)));
			bw.newLine();
		}

		bw.flush();
		bw.close();		
		br.close();
	}

	public static void calc(int num) {
		for (int i = 2; i <= num; i++) {
			num = calc(i, num);
			
			if (num == 1) {
				break;
			}
		}
	}
	
	private static int calc(int i, int num) {
		while (num % i == 0) {
			num /= i;		
			list.add(i);
		}
		
		return num;
	}
}//class



